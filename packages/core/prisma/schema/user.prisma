model User {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    email         String         @unique /// @zod.string.email()
    username      String         @unique
    isFlagged     Boolean        @default(false)
    flagReason    String?
    profile       Profile?
    post          Post?
    comments      Comment[]
    likes         Like[]
    bookmarks     Bookmark[]
    notifications Notification[]

    @@schema("auth")
}

model Profile {
    id                  Int                @id @default(autoincrement())
    userId              Int                @unique
    displayName         String?
    bio                 String?            @db.VarChar(60) /// @zod.string.max(60).min(1)
    avatar              String?
    link                String? /// @zod.string.url()
    profileViews        Int                @default(0)
    nextPostAllowedAt   DateTime?
    bookmarksVisibility BookmarkVisibility @default(PRIVATE)
    postId              Int?
    user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    isPrivate           Boolean            @default(false)

    @@schema("public")
}

enum BookmarkVisibility {
    PRIVATE
    PUBLIC

    @@schema("public")
}
