model Post {
  id           String     @id @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  postType     PostType
  text         String?    @db.VarChar(4000) /// @zod.string.max(4000).min(1)
  imageUrl     String?
  videoUrl     String?
  audioUrl     String?
  isFlagged    Boolean    @default(false)
  flagReason   String?
  commentCount Int        @default(0)
  likeCount    Int        @default(0)
  viewCount    Int        @default(0)
  bookmarks    Bookmark[]
  comments     Comment[]
  likes        Like[]
  profileId    String     @unique @db.Uuid
  profile      Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String   @db.VarChar(280) /// @zod.string.max(280).min(1)
  postId    String   @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String   @unique @db.Uuid
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@unique([profileId, postId])
}

model Like {
  id        String  @id @default(uuid()) @db.Uuid
  postId    String  @db.Uuid
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String  @unique @db.Uuid
  profile   Profile @relation(fields: [profileId], references: [id])

  @@unique([profileId, postId])
}

model Bookmark {
  id        String  @id @default(uuid()) @db.Uuid
  postId    String  @db.Uuid
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String  @unique @db.Uuid
  profile   Profile @relation(fields: [profileId], references: [id])

  @@unique([profileId, postId])
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}
