model Post {
    id           Int       @id @default(autoincrement())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    postType     PostType
    text         String?   @db.VarChar(4000) /// @zod.string.max(4000).min(1)
    imageUrl     String?
    videoUrl     String?
    audioUrl     String?
    isFlagged    Boolean   @default(false)
    flagReason   String?
    userId       Int       @unique
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments     Comment[]
    commentCount Int       @default(0)
    likes        Like[]
    likeCount    Int       @default(0)
    viewCount    Int       @default(0)

    @@schema("public")
}

enum PostType {
    TEXT
    IMAGE
    VIDEO
    AUDIO

    @@schema("public")
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String   @db.VarChar(280) /// @zod.string.max(280).min(1)
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@schema("public")
}

model Like {
    id     Int  @id @default(autoincrement())
    userId Int
    user   User @relation(fields: [userId], references: [id])
    postId Int
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@schema("public")
}

model Bookmark {
    id     Int  @id @default(autoincrement())
    userId Int
    user   User @relation(fields: [userId], references: [id])
    postId Int

    @@unique([userId, postId])
    @@schema("public")
}
