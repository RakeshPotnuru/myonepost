// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  email                String    @unique
  username             String    @unique @db.VarChar(30)
  display_name         String?   @db.VarChar(30)
  bio                  String?   @db.VarChar(150)
  avatar_url           String?
  url                  String?
  next_post_allowed_at DateTime? @db.Timestamptz(3)
  is_private           Boolean   @default(false)
  subscriber_count     Int       @default(0)
  subscription_count   Int       @default(0)

  subscribers     subscribers[]   @relation("UserSubscribers")
  subscribed_to   subscribers[]   @relation("UserSubscribedTo")
  post            posts?
  likes           post_likes[]
  comments        comments[]
  comment_likes   comment_likes[]
  notifications   notifications[]
  reports_made    reports[]       @relation("ReportMadeBy")
  reports_against reports[]       @relation("ReportAgainst")
}

model subscribers {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)

  user_id          String @db.Uuid
  user             users  @relation("UserSubscribers", fields: [user_id], references: [id], onDelete: Cascade)
  subscribed_to_id String @db.Uuid
  subscribed_to    users  @relation("UserSubscribedTo", fields: [subscribed_to_id], references: [id], onDelete: Cascade)

  @@unique([user_id, subscribed_to_id])
}

model posts {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  post_type     PostType
  text          String?    @db.VarChar(4000)
  media_url     String?
  /// [MediaDataType]
  media_data    Json?      @db.JsonB
  media_caption String?    @db.VarChar(150)
  comment_count Int        @default(0)
  like_count    Int        @default(0)
  status        PostStatus @default(PENDING)

  user_id    String       @unique @db.Uuid
  user       users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes      post_likes[]
  comments   comments[]
  reports    reports[]
  post_score post_scores?
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

enum PostStatus {
  PENDING // draft/processing
  APPROVED // posted
  FLAGGED // in review
  REJECTED // not approved
}

model post_likes {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)

  user_id String @db.Uuid
  user    users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_id String @db.Uuid
  post    posts  @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
}

model comments {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  text       String @db.VarChar(280)
  like_count Int    @default(0)

  user_id String          @db.Uuid
  user    users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_id String          @db.Uuid
  post    posts           @relation(fields: [post_id], references: [id], onDelete: Cascade)
  likes   comment_likes[]
  reports reports[]

  @@unique([user_id, post_id])
}

model comment_likes {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)

  user_id    String   @db.Uuid
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment_id String   @db.Uuid
  comment    comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@unique([user_id, comment_id])
}

model notifications {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)

  type    NotificationType
  is_read Boolean          @default(false)
  content String           @db.VarChar(280)

  user_id String @db.Uuid
  user    users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum NotificationType {
  NEW_POST_LIKE
  NEW_COMMENT_LIKE
  NEW_COMMENT
  NEW_SUBSCRIBER
  ALERT
}

model reports {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  reason      ReportReason
  description String?      @db.VarChar(280)
  report_type ReportType
  status      ReportStatus @default(PENDING)

  reported_by_id String @db.Uuid
  reported_by    users  @relation("ReportMadeBy", fields: [reported_by_id], references: [id], onDelete: Cascade)

  reported_user_id String @db.Uuid
  reported_user    users  @relation("ReportAgainst", fields: [reported_user_id], references: [id], onDelete: Cascade)

  post_id String? @db.Uuid
  post    posts?  @relation(fields: [post_id], references: [user_id], onDelete: Cascade)

  comment_id String?   @db.Uuid
  comment    comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportType {
  USER
  POST
  COMMENT
}

enum ReportReason {
  INAPPROPRIATE_CONTENT // Offensive or inappropriate language or visuals
  HARASSMENT // Bullying or harassment towards a user
  SPAM // Unwanted, irrelevant, or repetitive content
  FALSE_INFORMATION // Content spreading false or misleading information
  HATE_SPEECH // Content promoting hate against a group or individual
  VIOLENCE // Content depicting violence or encouraging harm
  COPYRIGHT_VIOLATION // Violation of intellectual property rights
  PRIVACY // Violation of privacy rights
  CHILD_EXPLOITATION // Content depicting or promoting child exploitation
  OTHER // For other reasons not listed above
}

model post_scores {
  id         String   @id @default(uuid()) @db.Uuid
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  score Float

  post_id String @unique @db.Uuid
  post    posts  @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id])
}
